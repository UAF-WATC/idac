##########################################
## ---- Add Noise to Propated Wave ---- ##
##########################################
 
import numpy as np
import os
import matplotlib.pyplot as plt
import obspy
from obspy.clients.fdsn import Client
from obspy import UTCDateTime
import scipy.signal as signal

project_dir = '/home/alex/projects/infid/sandbox/hrr_eg1/'


##############
### INPUTS ###
##############

amp_scale = 1000


##########################
### WHERE ARE THE DATA ###
##########################

## the random recordings
rand_rec_dir = project_dir + 'modeled_data/random_recordings/'
rand_files = os.listdir(rand_rec_dir)

## the propagated waveform files
prop_dir = project_dir + 'modeled_data/propagated_waves/'
prop_files = os.listdir(prop_dir)

## loop over the propagated files
i=0
while i < len(prop_files):

    #######################
    ### READ IN THE DATA ##
    #######################

    ## the current random recording
    cur_rand_file = rand_files[i]
    cur_rand_path = rand_rec_dir + cur_rand_file
    
    ## read in the stream
    cur_stream = obspy.read(cur_rand_path)
    
    ## the propagated data
    cur_prop_file = prop_files[i]
    cur_prop_path = prop_dir + cur_prop_file

    ## read in the propagated wave
    prop_wave_org = np.loadtxt(cur_prop_path)

    ## scale the propagated wave
    prop_wave = prop_wave_org[:]
    prop_wave[:,1] = prop_wave_org[:,1] * amp_scale

    ### CHECK IF PROPAGATED WAVE IS IN "SHADOW ZONE"
    shadow_tol = 2 #[Pa]
    if np.max(prop_wave[:,1]) < shadow_tol:
        i=i+1
        print('pass')
        continue
    


    ###################################################
    ### ADD RANDOM RECORDED DATA TO PROPAGATED WAVE ###
    ###################################################

    ## how many points are in inf_wig
    n_wig = len(cur_stream[0])

    ### resample propagated wave to match infrasound wiggle
    prop_wave_resample = np.zeros([n_wig,2])
    prop_wave_resample[:,0] = np.linspace(prop_wave[0,0],prop_wave[-1,0], n_wig)
    prop_wave_resample[:,1] = signal.resample(prop_wave[:,1], n_wig)

    ## add the resampled propagated wave to the infrasound wiggle
    synth_event = cur_stream[:]
    synth_event[0]=obspy.Trace(np.array(synth_event[0]) + prop_wave_resample[:,1])
    
    synth_event[0].stats = cur_stream[0].stats

    ## filter the event
    ##filt_event = synth_event.filter("bandpass", freqmin=0.01, freqmax=10)

    #####################
    ## SCIPY FILTERING ##
    #####################

    sps = synth_event[0].stats.sampling_rate
    b, a = signal.butter(N=2, Wn=[0.01, 10], btype='bandpass',fs=sps)
    scipy_filter = signal.filtfilt(b, a, synth_event[0].data)

    ## replace the current stream with the scipy filtered data
    filt_event = cur_stream.copy()
    filt_event[0].data = scipy_filter

    ##filt_event.plot()



    ##############
    ### SAVING ###
    ##############

    save_dir = project_dir + 'modeled_data/synthetic_events/'
    save_file = cur_prop_file[:-4] + '.mseed'
    save_path = save_dir + save_file
    

    filt_event.write(save_path)

    i=i+1
    print(i)
#




