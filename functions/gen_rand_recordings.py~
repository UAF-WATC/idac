##########################################
## ---- Generate Random Recordings ---- ##
##########################################


import infid as inf
import numpy as np
import obspy
import matplotlib.pyplot as plt
import os
from obspy.clients.fdsn import Client
import obspy
from obspy import UTCDateTime
import random

project_dir = '/home/alex/projects/infid/sandbox/hrr_eg1/'

############
## INPUTS ##
############

client = Client(base_url='IRIS')

## station information
network = 'TA'
station = 'W18A'
location = 'EP'
channel = 'BDF'

## create a range of times
years = ['2012']
months = ['08']
days = [str(i) for i in (np.arange(30)+1)]
hours = [str(i) for i in (np.arange(23)+1)]
mins = [str(i) for i in (np.arange(59)+1)]
secs = [str(i) for i in (np.arange(59)+1)]


## propagated waveform files
prop_dir = project_dir + 'modeled_data/propagated_waves/'
prop_files = os.listdir(prop_dir)

## how many random wiggles do you need?
n_wigs = len(prop_files)

## generate twice as many for both events and non events
n_wigs = n_wigs*2 

## initilize an array to hold all the time information
all_times = np.zeros((n_wigs,6))
all_times[:] = np.nan


## find all permutations of the inputs 
all_inputs = [[i,j,k,l,n] for i in years for j in months for k in days for l in hours for m in mins for n in secs]

## take a sample of all the inputs
samp_inputs = 


## generate n_wigs worth of random times
i=0
while i < n_wigs:

    ## continue the below loop so long as the condition is true
    keep_trying = True

    while keep_trying == True: 

        ## sample each of the time elements
        cur_year = np.random.choice(years)
        cur_month = np.random.choice(months)
        cur_day = np.random.choice(days)
        cur_hour = np.random.choice(hours)
        cur_min = np.random.choice(mins)
        cur_sec = np.random.choice(secs)

        ## add all these into a single list
        cur_time = [cur_year, cur_month, cur_day, cur_hour, cur_min, cur_sec]
        
        ## check if the current time is already in the all times array
        if cur_time not in all_times.tolist():
            keep_trying = False
        #
    #

    ## if it passed add the current time to the all times array
    all_times[i,:] = cur_time

    print(i)
    i=i+1
#

## loop over all the times
i=0
while i < len(all_times):

    ## what is the current time
    cur_time = all_times[i,:]

    ## what are the current time elements
    cur_year = int(cur_time[0])
    cur_month = int(cur_time[1])
    cur_day = int(cur_time[2])
    cur_hour = int(cur_time[3])
    cur_min = int(cur_time[4])
    cur_sec = int(cur_time[5])

    ## create a UTC time object
    cur_start=UTCDateTime(cur_year, cur_month, cur_day, cur_hour, cur_min, cur_sec)
    cur_stop = cur_start + 500

    ## read in the stream
    cur_stream = client.get_waveforms(network, station, location, channel, cur_start, cur_stop,attach_response=True)
    
    ## remove sensativity
    cur_stream.remove_sensitivity()

    ## filter the wiggle
    ## filt_stream = cur_stream.filter("bandpass", freqmin=0.01, freqmax=10)


    ##############
    ### SAVING ###
    ##############

    ## get a good file name
    save_file = network + '_' + station + '_' + location + '_' + channel + '_' + str(cur_year) + '_' + str(cur_month) + '_' + str(cur_day) + '_' + str(cur_hour) + '_' + str(cur_min) + '_' + str(cur_sec) + '.mseed'

    save_dir = project_dir + 'modeled_data/random_recordings/'
    save_path = save_dir + save_file

    cur_stream.write(save_path)

    ##test = obspy.read(save_path)

    i=i+1
    print(i)
#






