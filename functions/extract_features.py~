###########################################################
## ---- Generate Features From Propagated Waveforms ---- ##
###########################################################

import infid as inf
import numpy as np
import obspy
import matplotlib.pyplot as plt
import os


project_dir = '/home/alex/projects/infid/sandbox/hrr_eg1/'

############
## INPUTS ##
############

## propagated waveform files
synth_dir = project_dir + 'modeled_data/synthetic_events/'
synth_files = os.listdir(synth_dir)


## read in one file to figure out how many features we will extract
##dme_prop = np.loadtxt(prop_dir + prop_files[0])
dme_synth = obspy.read(synth_dir + synth_files[0])
dme_wig = dme_synth[0].data
dme_sps = dme_synth[0].stats.sampling_rate
dme_features = inf.calc_features(dme_wig,dme_sps)

## setup an array to hold all the features
all_features = np.zeros((len(synth_files),len(dme_features)))

## loop over synthetic event files
i=0
while i < len(synth_files):

    ## read in the current file
    cur_file_path = synth_dir + synth_files[i]
    cur_synth = obspy.read(cur_file_path)

    ## define the wiggle and sampling rate
    wig = cur_synth[0].data
    sps = cur_synth[0].stats.sampling_rate

    ########################
    ### EXTRACT FEATURES ###
    ########################

    ## calculate the current feature
    cur_features = inf.calc_features(wig, sps)
    
    ## add the current feature to the all features array
    all_features[i,:] = cur_features

    i=i+1
    print(i)
#


##############
### SAVING ###
##############

save_dir = project_dir + 'results/training_results/features/'
save_file = 'synth_features.dat'
save_path = save_dir + save_file

np.savetxt(save_path, all_features)

# plt.close('all')
# plt.ion()
# plt.figure()

# plt.hist(all_features[:,8])


